Neural Networks: Learning

5 questions
1. %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
You are training a three layer neural network and would like to use backpropagation to 
compute the gradient of the cost function. In the backpropagation algorithm, one of the 
steps is to update

Δ(2)ij:=Δ(2)ij+δ(3)i∗(a(2))j
for every i,j. Which of the following is a correct vectorization of this step?

Δ(2):=Δ(2)+δ(2)∗(a(3))T

-> Δ(2):=Δ(2)+δ(3)∗(a(2))T

Δ(2):=Δ(2)+(a(2))T∗δ(3)

Δ(2):=Δ(2)+(a(2))T∗δ(2)

2. %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Suppose 𝚃𝚑𝚎𝚝𝚊𝟷 is a 5x3 matrix, and 𝚃𝚑𝚎𝚝𝚊𝟸 is a 4x6 matrix. You set 
𝚝𝚑𝚎𝚝𝚊𝚅𝚎𝚌=[𝚃𝚑𝚎𝚝𝚊𝟷(:);𝚃𝚑𝚎𝚝𝚊𝟸(:)]. 
Which of the following correctly recovers 𝚃𝚑𝚎𝚝𝚊𝟸?

-> 𝚛𝚎𝚜𝚑𝚊𝚙𝚎(𝚝𝚑𝚎𝚝𝚊𝚅𝚎𝚌(𝟷𝟼:𝟹𝟿),𝟺,𝟼)

𝚛𝚎𝚜𝚑𝚊𝚙𝚎(𝚝𝚑𝚎𝚝𝚊𝚅𝚎𝚌(𝟷𝟻:𝟹𝟾),𝟺,𝟼)

𝚛𝚎𝚜𝚑𝚊𝚙𝚎(𝚝𝚑𝚎𝚝𝚊𝚅𝚎𝚌(𝟷𝟼:𝟸𝟺),𝟺,𝟼)

𝚛𝚎𝚜𝚑𝚊𝚙𝚎(𝚝𝚑𝚎𝚝𝚊𝚅𝚎𝚌(𝟷𝟻:𝟹𝟿),𝟺,𝟼)

𝚛𝚎𝚜𝚑𝚊𝚙𝚎(𝚝𝚑𝚎𝚝𝚊𝚅𝚎𝚌(𝟷𝟼:𝟹𝟿),𝟼,𝟺)

3. %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Let J(θ)=2θ4+2. Let θ=1, and ϵ=0.01. Use the formula J(θ+ϵ)−J(θ−ϵ)2ϵ to numerically 
compute an approximation to the derivative at θ=1. What value do you get? 
(When θ=1, the true/exact derivative is dJ(θ)dθ=8.)

-> 8.0008

7.9992

8

10

4. %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Which of the following statements are true? Check all that apply.

Gradient checking is useful if we are using gradient descent as our optimization algorithm. 
However, it serves little purpose if we are using one of the advanced optimization methods 
(such as in fminunc).

-> Using gradient checking can help verify if one's implementation of backpropagation is 
bug-free.

Using a large value of λ cannot hurt the performance of your neural network; the only 
reason we do not set λ to be too large is to avoid numerical problems.

-> If our neural network overfits the training set, one reasonable step to take is to 
increase the regularization parameter λ.


5. %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Which of the following statements are true? Check all that apply.

-> Suppose you are training a neural network using gradient descent. Depending on your
 random initialization, your algorithm may converge to different local optima 
 (i.e., if you run the algorithm twice with different random initializations, gradient 
 descent may converge to two different solutions).

If we initialize all the parameters of a neural network to ones instead of zeros, this 
will suffice for the purpose of "symmetry breaking" because the parameters are no longer 
symmetrically equal to zero.

-> If we are training a neural network using gradient descent, one reasonable "debugging" 
step to make sure it is working is to plot J(Θ) as a function of the number of iterations, 
and make sure it is decreasing (or at least non-increasing) after each iteration.

Suppose you have a three layer network with parameters Θ(1) (controlling the function 
mapping from the inputs to the hidden units) and Θ(2) (controlling the mapping from the 
hidden units to the outputs). If we set all the elements of Θ(1) to be 0, and all the 
elements of Θ(2) to be 1, then this suffices for symmetry breaking, since the neurons 
are no longer all computing the same function of the input.